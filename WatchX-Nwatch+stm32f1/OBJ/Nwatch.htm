<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\OBJ\Nwatch.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\OBJ\Nwatch.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Wed Aug 10 19:39:25 2022
<BR><P>
<H3>Maximum Stack Usage =        328 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
itemLoader &rArr; addBackOption &rArr; setMenuOption_P &rArr; setMenuOption &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_d2iz
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[d1]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[24]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[7f]">next</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7f]">next</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[24]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[c]">BusFault_Handler</a> from stm32f10x_it.o(i.BusFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[27]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[28]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1d]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1e]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1f]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[20]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[21]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[22]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[23]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4a]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4b]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4c]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4d]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[f]">DebugMon_Handler</a> from stm32f10x_it.o(i.DebugMon_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[18]">EXTI0_IRQHandler</a> from key.o(i.EXTI0_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[19]">EXTI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1a]">EXTI2_IRQHandler</a> from key.o(i.EXTI2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1b]">EXTI3_IRQHandler</a> from key.o(i.EXTI3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1c]">EXTI4_IRQHandler</a> from key.o(i.EXTI4_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[29]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[16]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a]">HardFault_Handler</a> from stm32f10x_it.o(i.HardFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[32]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[31]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[34]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[33]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b]">MemManage_Handler</a> from stm32f10x_it.o(i.MemManage_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[9]">NMI_Handler</a> from stm32f10x_it.o(i.NMI_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[13]">PVD_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[10]">PendSV_Handler</a> from stm32f10x_it.o(i.PendSV_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[17]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[15]">RTC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">SDIO_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">SPI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[36]">SPI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[45]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[e]">SVC_Handler</a> from stm32f10x_it.o(i.SVC_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[11]">SysTick_Handler</a> from stm32f10x_it.o(i.SysTick_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4e]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[14]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2a]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2d]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2c]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2b]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2e]">TIM2_IRQHandler</a> from millis.o(i.TIM2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2f]">TIM3_IRQHandler</a> from beep.o(i.TIM3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[30]">TIM4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">TIM5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[48]">TIM6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[49]">TIM7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3e]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[46]">UART4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[47]">UART5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[37]">USART1_IRQHandler</a> from usart.o(i.USART1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">USART2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[39]">USART3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[25]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[26]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[d]">UsageFault_Handler</a> from stm32f10x_it.o(i.UsageFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[12]">WWDG_IRQHandler</a> from wwdg.o(i.WWDG_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[9b]">__main</a> from __main.o(!!!main) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[51]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[50]">_sputc</a> from _sputc.o(.text) referenced from noretval__2sprintf.o(.text)
 <LI><a href="#[81]">alarmsDown</a> from alarms.o(i.alarmsDown) referenced from alarms.o(i.selectAlarm)
 <LI><a href="#[82]">alarmsDraw</a> from alarms.o(i.alarmsDraw) referenced from alarms.o(i.selectAlarm)
 <LI><a href="#[80]">alarmsUp</a> from alarms.o(i.alarmsUp) referenced from alarms.o(i.selectAlarm)
 <LI><a href="#[52]">back</a> from menu.o(i.back) referenced from menu.o(i.addBackOption)
 <LI><a href="#[94]">batteryUpdate</a> from diag.o(i.batteryUpdate) referenced from diag.o(i.updateVoltage)
 <LI><a href="#[90]">btnExit</a> from stopwatch.o(i.btnExit) referenced from stopwatch.o(i.stopwatch_open)
 <LI><a href="#[92]">btnReset</a> from stopwatch.o(i.btnReset) referenced from stopwatch.o(i.stopwatch_open)
 <LI><a href="#[91]">btnStartStop</a> from stopwatch.o(i.btnStartStop) referenced from stopwatch.o(i.stopwatch_open)
 <LI><a href="#[5a]">display_load</a> from display.o(i.display_load) referenced from stopwatch.o(i.btnExit)
 <LI><a href="#[96]">down</a> from watchface.o(i.down) referenced from watchface.o(i.watchfaceOpen)
 <LI><a href="#[99]">down</a> from normal.o(i.down) referenced from normal.o(i.watchface_normal)
 <LI><a href="#[53]">draw</a> from alarm.o(i.draw) referenced from alarm.o(i.alarm_update)
 <LI><a href="#[8f]">draw</a> from stopwatch.o(i.draw) referenced from stopwatch.o(i.stopwatch_open)
 <LI><a href="#[95]">draw</a> from watchface.o(i.draw) referenced from watchface.o(i.watchfaceOpen)
 <LI><a href="#[98]">draw</a> from normal.o(i.draw) referenced from normal.o(i.watchface_normal)
 <LI><a href="#[55]">itemLoader</a> from timedate.o(i.itemLoader) referenced from timedate.o(i.beginSelect)
 <LI><a href="#[55]">itemLoader</a> from timedate.o(i.itemLoader) referenced from timedate.o(i.endSelect)
 <LI><a href="#[69]">itemLoader</a> from alarms.o(i.itemLoader) referenced from alarms.o(i.mAlarmsOpen)
 <LI><a href="#[6d]">itemLoader</a> from diag.o(i.itemLoader) referenced from diag.o(i.mDiagOpen)
 <LI><a href="#[6f]">itemLoader</a> from m_display.o(i.itemLoader) referenced from m_display.o(i.mDisplayOpen)
 <LI><a href="#[76]">itemLoader</a> from m_main.o(i.itemLoader) referenced from m_main.o(i.mOpen)
 <LI><a href="#[78]">itemLoader</a> from settings.o(i.itemLoader) referenced from settings.o(i.mSettingsOpen)
 <LI><a href="#[7a]">itemLoader</a> from sleep.o(i.itemLoader) referenced from sleep.o(i.mSleepOpen)
 <LI><a href="#[7d]">itemLoader</a> from sound.o(i.itemLoader) referenced from sound.o(i.mSoundOpen)
 <LI><a href="#[55]">itemLoader</a> from timedate.o(i.itemLoader) referenced from timedate.o(i.mTimeDateOpen)
 <LI><a href="#[69]">itemLoader</a> from alarms.o(i.itemLoader) referenced from alarms.o(i.selectAlarm)
 <LI><a href="#[5f]">mAlarmsOpen</a> from alarms.o(i.mAlarmsOpen) referenced from m_main.o(i.itemLoader)
 <LI><a href="#[5f]">mAlarmsOpen</a> from alarms.o(i.mAlarmsOpen) referenced from alarms.o(i.mAlarmsOpen)
 <LI><a href="#[67]">mDiagOpen</a> from diag.o(i.mDiagOpen) referenced from settings.o(i.itemLoader)
 <LI><a href="#[67]">mDiagOpen</a> from diag.o(i.mDiagOpen) referenced from diag.o(i.mDiagOpen)
 <LI><a href="#[66]">mDisplayOpen</a> from m_display.o(i.mDisplayOpen) referenced from settings.o(i.itemLoader)
 <LI><a href="#[66]">mDisplayOpen</a> from m_display.o(i.mDisplayOpen) referenced from m_display.o(i.mDisplayOpen)
 <LI><a href="#[5e]">mDown</a> from timedate.o(i.mDown) referenced from timedate.o(i.endSelect)
 <LI><a href="#[5e]">mDown</a> from timedate.o(i.mDown) referenced from timedate.o(i.mTimeDateOpen)
 <LI><a href="#[7c]">mDraw</a> from sleep.o(i.mDraw) referenced from sleep.o(i.mSleepOpen)
 <LI><a href="#[72]">mOpen</a> from m_main.o(i.mOpen) referenced from m_main.o(i.mMainOpen)
 <LI><a href="#[72]">mOpen</a> from m_main.o(i.mOpen) referenced from m_main.o(i.mOpen)
 <LI><a href="#[57]">mSelect</a> from timedate.o(i.mSelect) referenced from timedate.o(i.beginSelect)
 <LI><a href="#[57]">mSelect</a> from timedate.o(i.mSelect) referenced from timedate.o(i.endSelect)
 <LI><a href="#[6b]">mSelect</a> from alarms.o(i.mSelect) referenced from alarms.o(i.mAlarmsOpen)
 <LI><a href="#[6e]">mSelect</a> from diag.o(i.mSelect) referenced from diag.o(i.mDiagOpen)
 <LI><a href="#[70]">mSelect</a> from m_display.o(i.mSelect) referenced from m_display.o(i.mDisplayOpen)
 <LI><a href="#[77]">mSelect</a> from m_main.o(i.mSelect) referenced from m_main.o(i.mOpen)
 <LI><a href="#[79]">mSelect</a> from settings.o(i.mSelect) referenced from settings.o(i.mSettingsOpen)
 <LI><a href="#[7b]">mSelect</a> from sleep.o(i.mSelect) referenced from sleep.o(i.mSleepOpen)
 <LI><a href="#[7e]">mSelect</a> from sound.o(i.mSelect) referenced from sound.o(i.mSoundOpen)
 <LI><a href="#[57]">mSelect</a> from timedate.o(i.mSelect) referenced from timedate.o(i.mTimeDateOpen)
 <LI><a href="#[6b]">mSelect</a> from alarms.o(i.mSelect) referenced from alarms.o(i.selectAlarm)
 <LI><a href="#[61]">mSettingsOpen</a> from settings.o(i.mSettingsOpen) referenced from m_main.o(i.itemLoader)
 <LI><a href="#[61]">mSettingsOpen</a> from settings.o(i.mSettingsOpen) referenced from settings.o(i.mSettingsOpen)
 <LI><a href="#[64]">mSleepOpen</a> from sleep.o(i.mSleepOpen) referenced from settings.o(i.itemLoader)
 <LI><a href="#[64]">mSleepOpen</a> from sleep.o(i.mSleepOpen) referenced from sleep.o(i.mSleepOpen)
 <LI><a href="#[65]">mSoundOpen</a> from sound.o(i.mSoundOpen) referenced from settings.o(i.itemLoader)
 <LI><a href="#[65]">mSoundOpen</a> from sound.o(i.mSoundOpen) referenced from sound.o(i.mSoundOpen)
 <LI><a href="#[63]">mTimeDateOpen</a> from timedate.o(i.mTimeDateOpen) referenced from settings.o(i.itemLoader)
 <LI><a href="#[63]">mTimeDateOpen</a> from timedate.o(i.mTimeDateOpen) referenced from timedate.o(i.mTimeDateOpen)
 <LI><a href="#[5d]">mUp</a> from timedate.o(i.mUp) referenced from timedate.o(i.endSelect)
 <LI><a href="#[5d]">mUp</a> from timedate.o(i.mUp) referenced from timedate.o(i.mTimeDateOpen)
 <LI><a href="#[62]">menu_close</a> from menu.o(i.menu_close) referenced from m_main.o(i.itemLoader)
 <LI><a href="#[74]">menu_down</a> from menu.o(i.menu_down) referenced from m_main.o(i.mOpen)
 <LI><a href="#[73]">menu_draw</a> from menu.o(i.menu_draw) referenced from m_main.o(i.mOpen)
 <LI><a href="#[71]">menu_select</a> from menu.o(i.menu_select) referenced from m_main.o(i.mMainOpen)
 <LI><a href="#[71]">menu_select</a> from menu.o(i.menu_select) referenced from m_main.o(i.mOpen)
 <LI><a href="#[71]">menu_select</a> from menu.o(i.menu_select) referenced from watchface.o(i.watchfaceOpen)
 <LI><a href="#[71]">menu_select</a> from menu.o(i.menu_select) referenced from normal.o(i.watchface_normal)
 <LI><a href="#[75]">menu_up</a> from menu.o(i.menu_up) referenced from m_main.o(i.mOpen)
 <LI><a href="#[7f]">next</a> from tune.o(i.next) referenced from tune.o(i.next)
 <LI><a href="#[6c]">nextOption</a> from menu.o(i.nextOption) referenced from alarms.o(i.mAlarmsOpen)
 <LI><a href="#[6c]">nextOption</a> from menu.o(i.nextOption) referenced from diag.o(i.mDiagOpen)
 <LI><a href="#[6c]">nextOption</a> from menu.o(i.nextOption) referenced from m_display.o(i.mDisplayOpen)
 <LI><a href="#[6c]">nextOption</a> from menu.o(i.nextOption) referenced from m_main.o(i.mOpen)
 <LI><a href="#[6c]">nextOption</a> from menu.o(i.nextOption) referenced from settings.o(i.mSettingsOpen)
 <LI><a href="#[6c]">nextOption</a> from menu.o(i.nextOption) referenced from sleep.o(i.mSleepOpen)
 <LI><a href="#[6c]">nextOption</a> from menu.o(i.nextOption) referenced from sound.o(i.mSoundOpen)
 <LI><a href="#[6c]">nextOption</a> from menu.o(i.nextOption) referenced from alarms.o(i.selectAlarm)
 <LI><a href="#[6a]">prevOption</a> from menu.o(i.prevOption) referenced from alarms.o(i.mAlarmsOpen)
 <LI><a href="#[6a]">prevOption</a> from menu.o(i.prevOption) referenced from diag.o(i.mDiagOpen)
 <LI><a href="#[6a]">prevOption</a> from menu.o(i.prevOption) referenced from m_display.o(i.mDisplayOpen)
 <LI><a href="#[6a]">prevOption</a> from menu.o(i.prevOption) referenced from m_main.o(i.mOpen)
 <LI><a href="#[6a]">prevOption</a> from menu.o(i.prevOption) referenced from settings.o(i.mSettingsOpen)
 <LI><a href="#[6a]">prevOption</a> from menu.o(i.prevOption) referenced from sleep.o(i.mSleepOpen)
 <LI><a href="#[6a]">prevOption</a> from menu.o(i.prevOption) referenced from sound.o(i.mSoundOpen)
 <LI><a href="#[6a]">prevOption</a> from menu.o(i.prevOption) referenced from alarms.o(i.selectAlarm)
 <LI><a href="#[68]">saveTimeDate</a> from timedate.o(i.saveTimeDate) referenced from timedate.o(i.itemLoader)
 <LI><a href="#[8c]">selectAlarm</a> from alarms.o(i.selectAlarm) referenced from alarms.o(i.showAlarmStr)
 <LI><a href="#[8d]">selectDate</a> from timedate.o(i.selectDate) referenced from timedate.o(i.showDateStr)
 <LI><a href="#[8e]">selectTime</a> from timedate.o(i.selectTime) referenced from timedate.o(i.showTimeStr)
 <LI><a href="#[86]">setAnimations</a> from m_display.o(i.setAnimations) referenced from m_display.o(i.setMenuOptions)
 <LI><a href="#[83]">setBrightness</a> from m_display.o(i.setBrightness) referenced from m_display.o(i.setMenuOptions)
 <LI><a href="#[84]">setInvert</a> from m_display.o(i.setInvert) referenced from m_display.o(i.setMenuOptions)
 <LI><a href="#[87]">setLEDs</a> from m_display.o(i.setLEDs) referenced from m_display.o(i.setMenuOptions)
 <LI><a href="#[85]">setRotate</a> from m_display.o(i.setRotate) referenced from m_display.o(i.setMenuOptions)
 <LI><a href="#[93]">setShowFPS</a> from diag.o(i.setShowFPS) referenced from diag.o(i.updateFPS)
 <LI><a href="#[88]">setTimeout</a> from sleep.o(i.setTimeout) referenced from sleep.o(i.setMenuOptions)
 <LI><a href="#[8a]">setVolumeAlarm</a> from sound.o(i.setVolumeAlarm) referenced from sound.o(i.setMenuOptions)
 <LI><a href="#[8b]">setVolumeHour</a> from sound.o(i.setVolumeHour) referenced from sound.o(i.setMenuOptions)
 <LI><a href="#[89]">setVolumeUI</a> from sound.o(i.setVolumeUI) referenced from sound.o(i.setMenuOptions)
 <LI><a href="#[54]">stopAlarm</a> from alarm.o(i.stopAlarm) referenced from alarm.o(i.alarm_update)
 <LI><a href="#[60]">stopwatch_open</a> from stopwatch.o(i.stopwatch_open) referenced from m_main.o(i.itemLoader)
 <LI><a href="#[58]">timeDataDown</a> from timedate.o(i.timeDataDown) referenced from timedate.o(i.beginSelect)
 <LI><a href="#[56]">timeDataUp</a> from timedate.o(i.timeDataUp) referenced from timedate.o(i.beginSelect)
 <LI><a href="#[59]">timeDateDraw</a> from timedate.o(i.timeDateDraw) referenced from timedate.o(i.beginSelect)
 <LI><a href="#[97]">up</a> from watchface.o(i.up) referenced from watchface.o(i.watchfaceOpen)
 <LI><a href="#[9a]">up</a> from normal.o(i.up) referenced from normal.o(i.watchface_normal)
 <LI><a href="#[5c]">watchfaceOpen</a> from watchface.o(i.watchfaceOpen) referenced from normal.o(i.down)
 <LI><a href="#[5c]">watchfaceOpen</a> from watchface.o(i.watchfaceOpen) referenced from normal.o(i.up)
 <LI><a href="#[5b]">watchface_normal</a> from normal.o(i.watchface_normal) referenced from main.o(i.c_setup)
 <LI><a href="#[5b]">watchface_normal</a> from normal.o(i.watchface_normal) referenced from watchface.o(i.down)
 <LI><a href="#[5b]">watchface_normal</a> from normal.o(i.watchface_normal) referenced from watchface.o(i.up)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[9b]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[9c]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[9e]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1ae]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1af]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1b0]"></a>__decompress</STRONG> (Thumb, 100 bytes, Stack size unknown bytes, __dclz77c.o(!!dclz77c), UNUSED)

<P><STRONG><a name="[1b1]"></a>__decompress2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dclz77c.o(!!dclz77c), UNUSED)

<P><STRONG><a name="[1b2]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[9f]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[c1]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[a1]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[a2]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[a4]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[1b3]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[ab]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[1b4]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[a6]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[1b5]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[1b6]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1b7]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[1b8]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[1b9]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[1ba]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[1bb]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[1bc]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[1bd]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[1be]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[1bf]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[1c0]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[1c1]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[1c2]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[1c3]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[1c4]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[1c5]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[1c6]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[1c7]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[1c8]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[b0]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[1c9]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[1ca]"></a>__rt_lib_shutdown_fini_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[1cb]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[1cc]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000011))

<P><STRONG><a name="[1cd]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000012))

<P><STRONG><a name="[1ce]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[1cf]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[1d0]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[9d]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[1d1]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[a8]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[aa]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[1d2]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[ac]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; c_loop &rArr; display_update &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1d3]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[d2]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[af]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[1d4]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[b1]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[8]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d5]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[24]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d1]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1d6]"></a>__use_no_semihosting</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi_2.o(.text), UNUSED)

<P><STRONG><a name="[b3]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appconfig_init
</UL>

<P><STRONG><a name="[b6]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[b7]"></a>__2sprintf</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeAlarmStr
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarmsDraw
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_timeStr
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_update
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDraw
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawDate
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateVoltage
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateTemperature
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateFPS
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawDate
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeDateDraw
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeTimeStr
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeDateStr
</UL>

<P><STRONG><a name="[ba]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[bb]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[bc]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[bd]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[b9]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[a0]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[bf]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[15a]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawDate
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawTitle
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOption_P
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawDate
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeDateDraw
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeDateStr
</UL>

<P><STRONG><a name="[16a]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawTitle
</UL>

<P><STRONG><a name="[c2]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawTitle
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crt_animation
</UL>

<P><STRONG><a name="[e7]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_clearArea
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appconfig_init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_setup
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_flush
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crt_animation
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
</UL>

<P><STRONG><a name="[c4]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[c3]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[122]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_reset
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear
</UL>

<P><STRONG><a name="[1d7]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1d8]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[c5]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[1d9]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[0]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1da]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1db]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[b4]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[1dc]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[1dd]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[6]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[b5]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[c7]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[a7]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[c9]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[2]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[ca]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[cc]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
</UL>

<P><STRONG><a name="[be]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[b8]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[50]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[cd]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[a3]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[a5]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[1de]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[d0]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1df]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[cb]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[1e0]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[1e1]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[c6]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[c8]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[a9]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[ae]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[cf]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[ce]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[d3]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[dd]"></a>ADC_GetConversionValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_GetConversionValue))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Adc
</UL>

<P><STRONG><a name="[dc]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Adc
</UL>

<P><STRONG><a name="[da]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 184 bytes, Stack size 20 bytes, stm32f10x_adc.o(i.ADC_RegularChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Adc
</UL>

<P><STRONG><a name="[db]"></a>ADC_SoftwareStartConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_SoftwareStartConvCmd))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Adc
</UL>

<P><STRONG><a name="[132]"></a>BKP_ReadBackupRegister</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_bkp.o(i.BKP_ReadBackupRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BKP_ReadBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appconfig_init
</UL>

<P><STRONG><a name="[133]"></a>BKP_WriteBackupRegister</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f10x_bkp.o(i.BKP_WriteBackupRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BKP_WriteBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appconfig_save
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appconfig_init
</UL>

<P><STRONG><a name="[c]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d5]"></a>CHARGING</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, adc.o(i.CHARGING))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CHARGING
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis_get
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_voltage
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
</UL>

<P><STRONG><a name="[f]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, key.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, key.o(i.EXTI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, key.o(i.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, key.o(i.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI4_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d8]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[e1]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SDA_OUT
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SDA_IN
</UL>

<P><STRONG><a name="[ee]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, stm32f10x_gpio.o(i.GPIO_PinRemapConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>

<P><STRONG><a name="[18b]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processButtons
</UL>

<P><STRONG><a name="[f0]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>

<P><STRONG><a name="[ef]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>

<P><STRONG><a name="[d9]"></a>Get_Adc</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, adc.o(i.Get_Adc))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Get_Adc &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCmd
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetConversionValue
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Adc_Average
</UL>

<P><STRONG><a name="[de]"></a>Get_Adc_Average</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, adc.o(i.Get_Adc_Average))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Get_Adc_Average &rArr; Get_Adc &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Adc
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_updateNow
</UL>

<P><STRONG><a name="[a]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e0]"></a>IIC_SDA_IN</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, iic.o(i.IIC_SDA_IN))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IIC_SDA_IN &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Write_Byte
</UL>

<P><STRONG><a name="[e2]"></a>IIC_SDA_OUT</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, iic.o(i.IIC_SDA_OUT))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IIC_SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Write_Byte
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
</UL>

<P><STRONG><a name="[e3]"></a>IIC_Start</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, iic.o(i.IIC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IIC_Start &rArr; IIC_SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SDA_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_Write_nByte
</UL>

<P><STRONG><a name="[e4]"></a>IIC_Stop</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, iic.o(i.IIC_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IIC_Stop &rArr; IIC_SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SDA_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_Write_nByte
</UL>

<P><STRONG><a name="[e5]"></a>IIC_Write_Byte</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, iic.o(i.IIC_Write_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IIC_Write_Byte &rArr; IIC_SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SDA_OUT
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SDA_IN
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_Write_nByte
</UL>

<P><STRONG><a name="[b]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[ff]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis_init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_PWM_Init_Init
</UL>

<P><STRONG><a name="[149]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis_init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_setup
</UL>

<P><STRONG><a name="[e6]"></a>OLED_Clear</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, oled.o(i.OLED_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OLED_Clear &rArr; OLED_Refresh &rArr; oled_flush &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>

<P><STRONG><a name="[e9]"></a>OLED_ColorTurn</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, oled.o(i.OLED_ColorTurn))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OLED_ColorTurn &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopAlarm
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_setup
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setInvert
</UL>

<P><STRONG><a name="[eb]"></a>OLED_DisplayTurn</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, oled.o(i.OLED_DisplayTurn))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OLED_DisplayTurn &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRotate
</UL>

<P><STRONG><a name="[ec]"></a>OLED_Init</STRONG> (Thumb, 306 bytes, Stack size 8 bytes, oled.o(i.OLED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OLED_Init &rArr; OLED_Clear &rArr; OLED_Refresh &rArr; oled_flush &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_setup
</UL>

<P><STRONG><a name="[e8]"></a>OLED_Refresh</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, oled.o(i.OLED_Refresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OLED_Refresh &rArr; oled_flush &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
</UL>

<P><STRONG><a name="[ea]"></a>OLED_WR_Byte</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, oled.o(i.OLED_WR_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ColorTurn
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DisplayTurn
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBrightness
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_flush
</UL>

<P><STRONG><a name="[f3]"></a>PCF8563_SetDate</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, pcf8563_cfg.o(i.PCF8563_SetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = PCF8563_SetDate &rArr; PCF8563_Write_nByte &rArr; IIC_Write_Byte &rArr; IIC_SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_Write_nByte
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_BinToBcd2
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_rtc
</UL>

<P><STRONG><a name="[f6]"></a>PCF8563_SetTime</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, pcf8563_cfg.o(i.PCF8563_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = PCF8563_SetTime &rArr; PCF8563_Write_nByte &rArr; IIC_Write_Byte &rArr; IIC_SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_Write_nByte
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_BinToBcd2
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_rtc
</UL>

<P><STRONG><a name="[f5]"></a>PCF8563_Write_nByte</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, pcf8563_cfg.o(i.PCF8563_Write_nByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = PCF8563_Write_nByte &rArr; IIC_Write_Byte &rArr; IIC_SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Write_Byte
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_SetTime
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_SetDate
</UL>

<P><STRONG><a name="[131]"></a>PWR_BackupAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_pwr.o(i.PWR_BackupAccessCmd))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appconfig_save
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appconfig_init
</UL>

<P><STRONG><a name="[10]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[fc]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appconfig_save
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis_init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appconfig_init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_PWM_Init_Init
</UL>

<P><STRONG><a name="[103]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[ed]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>

<P><STRONG><a name="[102]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[130]"></a>RTC_WaitForLastTask</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_WaitForLastTask))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appconfig_save
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appconfig_init
</UL>

<P><STRONG><a name="[e]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[150]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, misc.o(i.SysTick_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[11]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_setup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[2e]"></a>TIM2_IRQHandler</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, millis.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM2_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TIM3_IRQHandler</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, beep.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM3_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[fb]"></a>TIM3_PWM_Init_Init</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, beep.o(i.TIM3_PWM_Init_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIM3_PWM_Init_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_buzz
</UL>

<P><STRONG><a name="[187]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis_init
</UL>

<P><STRONG><a name="[fa]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[100]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis_init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_PWM_Init_Init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_buzz
</UL>

<P><STRONG><a name="[101]"></a>TIM_DeInit</STRONG> (Thumb, 424 bytes, Stack size 8 bytes, stm32f10x_tim.o(i.TIM_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis_init
</UL>

<P><STRONG><a name="[f9]"></a>TIM_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f10x_tim.o(i.TIM_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[fe]"></a>TIM_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis_init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_PWM_Init_Init
</UL>

<P><STRONG><a name="[fd]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis_init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_PWM_Init_Init
</UL>

<P><STRONG><a name="[37]"></a>USART1_IRQHandler</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, usart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[104]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f10x_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[105]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[d]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[107]"></a>WWDG_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_wwdg.o(i.WWDG_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_IRQHandler
</UL>

<P><STRONG><a name="[12]"></a>WWDG_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wwdg.o(i.WWDG_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WWDG_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_SetCounter
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[106]"></a>WWDG_SetCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_wwdg.o(i.WWDG_SetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_IRQHandler
</UL>

<P><STRONG><a name="[116]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[10a]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 828 bytes, Stack size 128 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
</UL>

<P><STRONG><a name="[113]"></a>__kernel_cos</STRONG> (Thumb, 230 bytes, Stack size 48 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
</UL>

<P><STRONG><a name="[114]"></a>__kernel_poly</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[115]"></a>__kernel_sin</STRONG> (Thumb, 224 bytes, Stack size 64 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
</UL>

<P><STRONG><a name="[118]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
</UL>

<P><STRONG><a name="[119]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
</UL>

<P><STRONG><a name="[117]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[c0]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[b2]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usart.o(i._sys_exit))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[d4]"></a>_ttywrch</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usart.o(i._ttywrch))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[11b]"></a>addBackOption</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, menu.o(i.addBackOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = addBackOption &rArr; setMenuOption_P &rArr; setMenuOption &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOption_P
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemLoader
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemLoader
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemLoader
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemLoader
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemLoader
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemLoader
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemLoader
</UL>

<P><STRONG><a name="[11e]"></a>alarm_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, alarm.o(i.alarm_get))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selectAlarm
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemLoader
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_getNext
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNextAlarm
</UL>

<P><STRONG><a name="[11d]"></a>alarm_getNext</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, alarm.o(i.alarm_getNext))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = alarm_getNext
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_get
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goingOff
</UL>

<P><STRONG><a name="[11f]"></a>alarm_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, alarm.o(i.alarm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = alarm_init &rArr; getNextAlarm &rArr; toMinutes
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNextAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_setup
</UL>

<P><STRONG><a name="[121]"></a>alarm_reset</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, alarm.o(i.alarm_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = alarm_reset &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appconfig_reset
</UL>

<P><STRONG><a name="[123]"></a>alarm_save</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, alarm.o(i.alarm_save))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = alarm_save &rArr; getNextAlarm &rArr; toMinutes
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNextAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selectAlarm
</UL>

<P><STRONG><a name="[124]"></a>alarm_update</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, alarm.o(i.alarm_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = alarm_update &rArr; tune_play &rArr; next &rArr;  next (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tune_play
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_flashing
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_flash
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_setDrawFunc
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_setFunc
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopAlarm
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goingOff
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_loop
</UL>

<P><STRONG><a name="[12b]"></a>alarm_updateNextAlarm</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, alarm.o(i.alarm_updateNextAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = alarm_updateNextAlarm &rArr; getNextAlarm &rArr; toMinutes
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNextAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_set
</UL>

<P><STRONG><a name="[152]"></a>animation_active</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, animation.o(i.animation_active))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_update
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doBtn
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_select
</UL>

<P><STRONG><a name="[157]"></a>animation_movingOn</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, animation.o(i.animation_movingOn))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doBtn
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_select
</UL>

<P><STRONG><a name="[16b]"></a>animation_offsetY</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, animation.o(i.animation_offsetY))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bitmap
</UL>

<P><STRONG><a name="[13b]"></a>animation_start</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, animation.o(i.animation_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = animation_start
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginAnimation2
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchfaceOpen
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginAnimation
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btnExit
</UL>

<P><STRONG><a name="[151]"></a>animation_update</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, animation.o(i.animation_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = animation_update
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_update
</UL>

<P><STRONG><a name="[12f]"></a>appconfig_init</STRONG> (Thumb, 422 bytes, Stack size 16 bytes, appconfig.o(i.appconfig_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = appconfig_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appconfig_reset
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_WriteBackupRegister
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_ReadBackupRegister
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_setup
</UL>

<P><STRONG><a name="[134]"></a>appconfig_reset</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, appconfig.o(i.appconfig_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = appconfig_reset &rArr; appconfig_save &rArr; BKP_WriteBackupRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appconfig_save
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appconfig_init
</UL>

<P><STRONG><a name="[135]"></a>appconfig_save</STRONG> (Thumb, 220 bytes, Stack size 8 bytes, appconfig.o(i.appconfig_save))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = appconfig_save &rArr; BKP_WriteBackupRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_WriteBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appconfig_reset
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveTimeDate
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
</UL>

<P><STRONG><a name="[52]"></a>back</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, menu.o(i.back))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = back &rArr; mMainOpen &rArr; beginAnimation &rArr; animation_start
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mMainOpen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(i.addBackOption)
</UL>
<P><STRONG><a name="[139]"></a>battery_setUpdate</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, battery.o(i.battery_setUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_update
</UL>

<P><STRONG><a name="[138]"></a>battery_update</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, battery.o(i.battery_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = battery_update &rArr; battery_updateNow &rArr; Get_Adc_Average &rArr; Get_Adc &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_updateNow
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_setUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDiagOpen
</UL>

<P><STRONG><a name="[137]"></a>battery_updateNow</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, battery.o(i.battery_updateNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = battery_updateNow &rArr; Get_Adc_Average &rArr; Get_Adc &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Adc_Average
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_update
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batteryUpdate
</UL>

<P><STRONG><a name="[d7]"></a>battery_voltage</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, battery.o(i.battery_voltage))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawBattery
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHARGING
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateVoltage
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
</UL>

<P><STRONG><a name="[13a]"></a>beginAnimation</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, menu.o(i.beginAnimation))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = beginAnimation &rArr; animation_start
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;animation_start
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOption
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mMainOpen
</UL>

<P><STRONG><a name="[13c]"></a>beginAnimation2</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, menu.o(i.beginAnimation2))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = beginAnimation2 &rArr; animation_start
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;animation_start
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mAlarmsOpen
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTimeDateOpen
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSoundOpen
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSleepOpen
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSettingsOpen
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mOpen
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDisplayOpen
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDiagOpen
</UL>

<P><STRONG><a name="[127]"></a>buttons_setFunc</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, buttons.o(i.buttons_setFunc))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_update
</UL>

<P><STRONG><a name="[17f]"></a>buttons_setFuncs</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, buttons.o(i.buttons_setFuncs))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopAlarm
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchface_normal
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchfaceOpen
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopwatch_open
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mMainOpen
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mOpen
</UL>

<P><STRONG><a name="[140]"></a>buttons_update</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, buttons.o(i.buttons_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = buttons_update &rArr; processButtons &rArr; processButton &rArr; tune_play &rArr; next &rArr;  next (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis_get
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processButtons
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_loop
</UL>

<P><STRONG><a name="[142]"></a>buzzer_buzz</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, beep.o(i.buzzer_buzz))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = buzzer_buzz &rArr; TIM3_PWM_Init_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis_get
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_PWM_Init_Init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tune_stop
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next
</UL>

<P><STRONG><a name="[144]"></a>c_loop</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main.o(i.c_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = c_loop &rArr; display_update &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_update
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopwatch_update
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_update
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_update
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_update
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[148]"></a>c_setup</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, main.o(i.c_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = c_setup &rArr; appconfig_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis_init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_load
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appconfig_init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ColorTurn
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14a]"></a>delay_init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, delay.o(i.delay_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_init
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_setup
</UL>

<P><STRONG><a name="[f1]"></a>delay_ms</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, delay.o(i.delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>

<P><STRONG><a name="[df]"></a>delay_us</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, delay.o(i.delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Adc_Average
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Write_Byte
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
</UL>

<P><STRONG><a name="[5a]"></a>display_load</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, display.o(i.display_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = display_load
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_setup
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;up
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;down
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_close
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;up
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;down
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stopwatch.o(i.btnExit)
</UL>
<P><STRONG><a name="[14d]"></a>display_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, display.o(i.display_set))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_setup
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;up
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;down
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;up
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;down
</UL>

<P><STRONG><a name="[126]"></a>display_setDrawFunc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, display.o(i.display_setDrawFunc))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopAlarm
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchface_normal
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_update
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchfaceOpen
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopwatch_open
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mOpen
</UL>

<P><STRONG><a name="[147]"></a>display_update</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, display.o(i.display_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = display_update &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;animation_update
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;animation_active
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis_get
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_end
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crt_animation
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_loop
</UL>

<P><STRONG><a name="[161]"></a>div10</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, global.o(i.div10))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
</UL>

<P><STRONG><a name="[154]"></a>doAction</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, menu.o(i.doAction))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = doAction &rArr; loader
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loader
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
</UL>

<P><STRONG><a name="[95]"></a>draw</STRONG> (Thumb, 906 bytes, Stack size 32 bytes, watchface.o(i.draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = draw &rArr; drawDate &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bitmap
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopwatch_active
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHARGING
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_voltage
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawDate
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;animateIcon
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__SysTick
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OLED_DrawLine
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> watchface.o(i.watchfaceOpen)
</UL>
<P><STRONG><a name="[15d]"></a>drawBattery</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, ui.o(i.drawBattery))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = drawBattery &rArr; draw_bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bitmap
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_voltage
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
</UL>

<P><STRONG><a name="[158]"></a>draw_bitmap</STRONG> (Thumb, 420 bytes, Stack size 80 bytes, draw.o(i.draw_bitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = draw_bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;animation_offsetY
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readPixels
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOption
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawBattery
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawTickerNum
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_drawIcon
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawTickerNum
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
</UL>

<P><STRONG><a name="[12d]"></a>draw_clearArea</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, draw.o(i.draw_clearArea))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = draw_clearArea
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarmsDraw
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeDateDraw
</UL>

<P><STRONG><a name="[153]"></a>draw_end</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, draw.o(i.draw_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = draw_end &rArr; oled_flush &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_update
</UL>

<P><STRONG><a name="[12e]"></a>draw_string</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, draw.o(i.draw_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = draw_string &rArr; draw_bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bitmap
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBuffByte
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOption
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarmsDraw
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_update
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDraw
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawDate
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_drawStr
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawTitle
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawDate
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeDateDraw
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
</UL>

<P><STRONG><a name="[181]"></a>exitSelected</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, menu.o(i.exitSelected))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrevMenuExit
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
</UL>

<P><STRONG><a name="[12a]"></a>led_flash</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, led.o(i.led_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = led_flash &rArr; flash
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_update
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_save
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processButton
</UL>

<P><STRONG><a name="[129]"></a>led_flashing</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, led.o(i.led_flashing))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_update
</UL>

<P><STRONG><a name="[14b]"></a>led_init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, led.o(i.led_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = led_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_setup
</UL>

<P><STRONG><a name="[5f]"></a>mAlarmsOpen</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, alarms.o(i.mAlarmsOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mAlarmsOpen &rArr; setMenuInfo &rArr; clear &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrevMenuOpen
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuInfo
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuFuncs
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginAnimation2
</UL>
<BR>[Address Reference Count : 2]<UL><LI> alarms.o(i.mAlarmsOpen)
<LI> m_main.o(i.itemLoader)
</UL>
<P><STRONG><a name="[67]"></a>mDiagOpen</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, diag.o(i.mDiagOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = mDiagOpen &rArr; battery_update &rArr; battery_updateNow &rArr; Get_Adc_Average &rArr; Get_Adc &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrevMenuOpen
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuInfo
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuFuncs
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginAnimation2
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_tempUpdate
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_update
</UL>
<BR>[Address Reference Count : 2]<UL><LI> diag.o(i.mDiagOpen)
<LI> settings.o(i.itemLoader)
</UL>
<P><STRONG><a name="[66]"></a>mDisplayOpen</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, m_display.o(i.mDisplayOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mDisplayOpen &rArr; setMenuInfo &rArr; clear &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrevMenuOpen
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuInfo
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuFuncs
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginAnimation2
</UL>
<BR>[Address Reference Count : 2]<UL><LI> m_display.o(i.mDisplayOpen)
<LI> settings.o(i.itemLoader)
</UL>
<P><STRONG><a name="[136]"></a>mMainOpen</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, m_main.o(i.mMainOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mMainOpen &rArr; beginAnimation &rArr; animation_start
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_setFuncs
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginAnimation
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;back
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_select
</UL>

<P><STRONG><a name="[61]"></a>mSettingsOpen</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, settings.o(i.mSettingsOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mSettingsOpen &rArr; setMenuInfo &rArr; clear &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrevMenuOpen
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuInfo
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuFuncs
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginAnimation2
</UL>
<BR>[Address Reference Count : 2]<UL><LI> m_main.o(i.itemLoader)
<LI> settings.o(i.mSettingsOpen)
</UL>
<P><STRONG><a name="[64]"></a>mSleepOpen</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, sleep.o(i.mSleepOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mSleepOpen &rArr; setMenuInfo &rArr; clear &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrevMenuOpen
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuInfo
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuFuncs
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginAnimation2
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sleep.o(i.mSleepOpen)
<LI> settings.o(i.itemLoader)
</UL>
<P><STRONG><a name="[65]"></a>mSoundOpen</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, sound.o(i.mSoundOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = mSoundOpen &rArr; setMenuOptions &rArr; setMenuOption_P &rArr; setMenuOption &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrevMenuOpen
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuInfo
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuFuncs
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginAnimation2
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOptions
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sound.o(i.mSoundOpen)
<LI> settings.o(i.itemLoader)
</UL>
<P><STRONG><a name="[63]"></a>mTimeDateOpen</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, timedate.o(i.mTimeDateOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mTimeDateOpen &rArr; setMenuInfo &rArr; clear &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrevMenuOpen
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuInfo
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuFuncs
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginAnimation2
</UL>
<BR>[Address Reference Count : 2]<UL><LI> settings.o(i.itemLoader)
<LI> timedate.o(i.mTimeDateOpen)
</UL>
<P><STRONG><a name="[ad]"></a>main</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = main &rArr; c_loop &rArr; display_update &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_setup
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_loop
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[62]"></a>menu_close</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, menu.o(i.menu_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = menu_close &rArr; clear &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_load
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopwatch_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_main.o(i.itemLoader)
</UL>
<P><STRONG><a name="[74]"></a>menu_down</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, menu.o(i.menu_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = menu_down &rArr; doBtn
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doBtn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_main.o(i.mOpen)
</UL>
<P><STRONG><a name="[73]"></a>menu_draw</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, menu.o(i.menu_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = menu_draw &rArr; menu_drawIcon &rArr; drawTitle &rArr; draw_string &rArr; draw_bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_drawStr
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_drawIcon
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_main.o(i.mOpen)
</UL>
<P><STRONG><a name="[71]"></a>menu_select</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, menu.o(i.menu_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = menu_select &rArr; mMainOpen &rArr; beginAnimation &rArr; animation_start
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;animation_movingOn
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;animation_active
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mMainOpen
</UL>
<BR>[Address Reference Count : 4]<UL><LI> normal.o(i.watchface_normal)
<LI> watchface.o(i.watchfaceOpen)
<LI> m_main.o(i.mMainOpen)
<LI> m_main.o(i.mOpen)
</UL>
<P><STRONG><a name="[75]"></a>menu_up</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, menu.o(i.menu_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = menu_up &rArr; doBtn
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doBtn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_main.o(i.mOpen)
</UL>
<P><STRONG><a name="[d6]"></a>millis_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, millis.o(i.millis_get))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopwatch_update
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_update
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_update
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHARGING
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processButton
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_buzz
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btnStartStop
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btnReset
</UL>

<P><STRONG><a name="[14c]"></a>millis_init</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, millis.o(i.millis_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = millis_init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_setup
</UL>

<P><STRONG><a name="[162]"></a>mod10</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, global.o(i.mod10))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
</UL>

<P><STRONG><a name="[6c]"></a>nextOption</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, menu.o(i.nextOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nextOption
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkScroll
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDown
</UL>
<BR>[Address Reference Count : 8]<UL><LI> m_display.o(i.mDisplayOpen)
<LI> alarms.o(i.mAlarmsOpen)
<LI> alarms.o(i.selectAlarm)
<LI> diag.o(i.mDiagOpen)
<LI> m_main.o(i.mOpen)
<LI> sleep.o(i.mSleepOpen)
<LI> sound.o(i.mSoundOpen)
<LI> settings.o(i.mSettingsOpen)
</UL>
<P><STRONG><a name="[f2]"></a>oled_flush</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, oled.o(i.oled_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = oled_flush &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_end
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh
</UL>

<P><STRONG><a name="[6a]"></a>prevOption</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, menu.o(i.prevOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prevOption
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkScroll
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mUp
</UL>
<BR>[Address Reference Count : 8]<UL><LI> m_display.o(i.mDisplayOpen)
<LI> alarms.o(i.mAlarmsOpen)
<LI> alarms.o(i.selectAlarm)
<LI> diag.o(i.mDiagOpen)
<LI> m_main.o(i.mOpen)
<LI> sleep.o(i.mSleepOpen)
<LI> sound.o(i.mSoundOpen)
<LI> settings.o(i.mSettingsOpen)
</UL>
<P><STRONG><a name="[13f]"></a>pwrmgr_setState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pwrmgr.o(i.pwrmgr_setState))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btnStartStop
</UL>

<P><STRONG><a name="[18c]"></a>rtc_save</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, m_rtc.o(i.rtc_save))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = rtc_save &rArr; save_rtc &rArr; PCF8563_SetTime &rArr; PCF8563_Write_nByte &rArr; IIC_Write_Byte &rArr; IIC_SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_flash
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_rtc
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_set
</UL>

<P><STRONG><a name="[17e]"></a>rtc_tempUpdate</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, m_rtc.o(i.rtc_tempUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDiagOpen
</UL>

<P><STRONG><a name="[18d]"></a>save_rtc</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, rtc.o(i.save_rtc))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = save_rtc &rArr; PCF8563_SetTime &rArr; PCF8563_Write_nByte &rArr; IIC_Write_Byte &rArr; IIC_SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_SetTime
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_SetDate
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_save
</UL>

<P><STRONG><a name="[13e]"></a>setMenuFuncs</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, menu.o(i.setMenuFuncs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setMenuFuncs
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mAlarmsOpen
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selectAlarm
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTimeDateOpen
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSoundOpen
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSleepOpen
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSettingsOpen
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mOpen
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDisplayOpen
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDiagOpen
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;endSelect
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginSelect
</UL>

<P><STRONG><a name="[17c]"></a>setMenuInfo</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, menu.o(i.setMenuInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = setMenuInfo &rArr; clear &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mAlarmsOpen
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTimeDateOpen
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSoundOpen
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSleepOpen
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSettingsOpen
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mOpen
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDisplayOpen
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDiagOpen
</UL>

<P><STRONG><a name="[191]"></a>setMenuOption</STRONG> (Thumb, 244 bytes, Stack size 64 bytes, menu.o(i.setMenuOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = setMenuOption &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bitmap
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginAnimation
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showAlarmStr
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOption_P
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateVoltage
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateTemperature
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateFPS
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showTimeStr
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showDateStr
</UL>

<P><STRONG><a name="[11c]"></a>setMenuOption_P</STRONG> (Thumb, 48 bytes, Stack size 48 bytes, menu.o(i.setMenuOption_P))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = setMenuOption_P &rArr; setMenuOption &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOption
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addBackOption
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOptions
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemLoader
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemLoader
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOptions
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemLoader
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemLoader
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOptions
</UL>

<P><STRONG><a name="[180]"></a>setPrevMenuExit</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, menu.o(i.setPrevMenuExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = setPrevMenuExit
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitSelected
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
</UL>

<P><STRONG><a name="[17d]"></a>setPrevMenuOpen</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, menu.o(i.setPrevMenuOpen))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mAlarmsOpen
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTimeDateOpen
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSoundOpen
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSleepOpen
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSettingsOpen
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mOpen
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDisplayOpen
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDiagOpen
</UL>

<P><STRONG><a name="[196]"></a>sin</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, sin.o(i.sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOption
</UL>

<P><STRONG><a name="[15f]"></a>stopwatch_active</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stopwatch.o(i.stopwatch_active))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
</UL>

<P><STRONG><a name="[60]"></a>stopwatch_open</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stopwatch.o(i.stopwatch_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = stopwatch_open &rArr; menu_close &rArr; clear &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_setDrawFunc
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_setFuncs
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_main.o(i.itemLoader)
</UL>
<P><STRONG><a name="[146]"></a>stopwatch_update</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stopwatch.o(i.stopwatch_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stopwatch_update
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis_get
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_loop
</UL>

<P><STRONG><a name="[190]"></a>time_dow</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, time.o(i.time_dow))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = time_dow
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selectDate
</UL>

<P><STRONG><a name="[19a]"></a>time_isLeapYear</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, time.o(i.time_isLeapYear))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_monthDayCount
</UL>

<P><STRONG><a name="[18f]"></a>time_monthDayCount</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, time.o(i.time_monthDayCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = time_monthDayCount
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_isLeapYear
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_update
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selectDate
</UL>

<P><STRONG><a name="[18e]"></a>time_set</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, time.o(i.time_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = time_set &rArr; rtc_save &rArr; save_rtc &rArr; PCF8563_SetTime &rArr; PCF8563_Write_nByte &rArr; IIC_Write_Byte &rArr; IIC_SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_timeMode
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_updateNextAlarm
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_save
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveTimeDate
</UL>

<P><STRONG><a name="[170]"></a>time_timeMode</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, time.o(i.time_timeMode))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selectAlarm
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeAlarmStr
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goingOff
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNextAlarm
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selectTime
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_set
</UL>

<P><STRONG><a name="[159]"></a>time_timeStr</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, time.o(i.time_timeStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = time_timeStr &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
</UL>

<P><STRONG><a name="[145]"></a>time_update</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, time.o(i.time_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = time_update &rArr; time_monthDayCount
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_monthDayCount
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_loop
</UL>

<P><STRONG><a name="[128]"></a>tune_play</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, tune.o(i.tune_play))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = tune_play &rArr; next &rArr;  next (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_update
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processButton
</UL>

<P><STRONG><a name="[198]"></a>tune_stop</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, tune.o(i.tune_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = tune_stop &rArr; buzzer_buzz &rArr; TIM3_PWM_Init_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_buzz
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopAlarm
</UL>

<P><STRONG><a name="[5c]"></a>watchfaceOpen</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, watchface.o(i.watchfaceOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = watchfaceOpen &rArr; animation_start
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;animation_start
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_setDrawFunc
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_setFuncs
</UL>
<BR>[Address Reference Count : 2]<UL><LI> normal.o(i.up)
<LI> normal.o(i.down)
</UL>
<P><STRONG><a name="[5b]"></a>watchface_normal</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, normal.o(i.watchface_normal))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = watchface_normal
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_setDrawFunc
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_setFuncs
</UL>
<BR>[Address Reference Count : 3]<UL><LI> main.o(i.c_setup)
<LI> watchface.o(i.up)
<LI> watchface.o(i.down)
</UL>
<P><STRONG><a name="[195]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOption
</UL>

<P><STRONG><a name="[19b]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[10c]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOption
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[19e]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[1a1]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[11a]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
</UL>

<P><STRONG><a name="[1a3]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[10e]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[1a4]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[160]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOption
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
</UL>

<P><STRONG><a name="[1a5]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[10f]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[1e2]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[111]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[1e3]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[10d]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOption
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[1a6]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[19d]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[1a0]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[110]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[1a7]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[10b]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[1a9]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[194]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOption
</UL>

<P><STRONG><a name="[1aa]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[193]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOption
</UL>

<P><STRONG><a name="[1ac]"></a>_fdiv</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[192]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOption
</UL>

<P><STRONG><a name="[1e4]"></a>_ffltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[1ab]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[19c]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[1a2]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[112]"></a>__ARM_scalbn</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[1ad]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[f7]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[f8]"></a>SetSysClockTo72</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[53]"></a>draw</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, alarm.o(i.draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = draw &rArr; time_timeStr &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_timeStr
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis_get
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bitmap
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> alarm.o(i.alarm_update)
</UL>
<P><STRONG><a name="[120]"></a>getNextAlarm</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, alarm.o(i.getNextAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = getNextAlarm &rArr; toMinutes
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_timeMode
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_get
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toMinutes
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_updateNextAlarm
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_save
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopAlarm
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_init
</UL>

<P><STRONG><a name="[125]"></a>goingOff</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, alarm.o(i.goingOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = goingOff &rArr; alarm_getNext
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_timeMode
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_getNext
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_update
</UL>

<P><STRONG><a name="[54]"></a>stopAlarm</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, alarm.o(i.stopAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = stopAlarm &rArr; tune_stop &rArr; buzzer_buzz &rArr; TIM3_PWM_Init_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tune_stop
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_setDrawFunc
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_setFuncs
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNextAlarm
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ColorTurn
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> alarm.o(i.alarm_update)
</UL>
<P><STRONG><a name="[171]"></a>toMinutes</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, alarm.o(i.toMinutes))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = toMinutes
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNextAlarm
</UL>

<P><STRONG><a name="[81]"></a>alarmsDown</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, alarms.o(i.alarmsDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = alarmsDown
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMaxValForSetting
</UL>
<BR>[Address Reference Count : 1]<UL><LI> alarms.o(i.selectAlarm)
</UL>
<P><STRONG><a name="[82]"></a>alarmsDraw</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, alarms.o(i.alarmsDraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = alarmsDraw &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_clearArea
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> alarms.o(i.selectAlarm)
</UL>
<P><STRONG><a name="[80]"></a>alarmsUp</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, alarms.o(i.alarmsUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = alarmsUp
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMaxValForSetting
</UL>
<BR>[Address Reference Count : 1]<UL><LI> alarms.o(i.selectAlarm)
</UL>
<P><STRONG><a name="[12c]"></a>getMaxValForSetting</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, alarms.o(i.getMaxValForSetting))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarmsUp
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarmsDown
</UL>

<P><STRONG><a name="[69]"></a>itemLoader</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, alarms.o(i.itemLoader))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = itemLoader &rArr; addBackOption &rArr; setMenuOption_P &rArr; setMenuOption &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addBackOption
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showAlarmStr
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_get
</UL>
<BR>[Address Reference Count : 2]<UL><LI> alarms.o(i.mAlarmsOpen)
<LI> alarms.o(i.selectAlarm)
</UL>
<P><STRONG><a name="[6b]"></a>mSelect</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, alarms.o(i.mSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mSelect &rArr; doAction &rArr; loader
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrevMenuExit
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitSelected
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doAction
</UL>
<BR>[Address Reference Count : 2]<UL><LI> alarms.o(i.mAlarmsOpen)
<LI> alarms.o(i.selectAlarm)
</UL>
<P><STRONG><a name="[182]"></a>makeAlarmStr</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, alarms.o(i.makeAlarmStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = makeAlarmStr &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_timeMode
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showAlarmStr
</UL>

<P><STRONG><a name="[8c]"></a>selectAlarm</STRONG> (Thumb, 502 bytes, Stack size 24 bytes, alarms.o(i.selectAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = selectAlarm &rArr; alarm_save &rArr; getNextAlarm &rArr; toMinutes
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuFuncs
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_timeMode
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_save
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> alarms.o(i.showAlarmStr)
</UL>
<P><STRONG><a name="[172]"></a>showAlarmStr</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, alarms.o(i.showAlarmStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = showAlarmStr &rArr; setMenuOption &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOption
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeAlarmStr
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemLoader
</UL>

<P><STRONG><a name="[18a]"></a>bitCount</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, buttons.o(i.bitCount))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processButton
</UL>

<P><STRONG><a name="[189]"></a>processButton</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, buttons.o(i.processButton))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = processButton &rArr; tune_play &rArr; next &rArr;  next (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tune_play
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis_get
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_flash
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitCount
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processButtons
</UL>

<P><STRONG><a name="[141]"></a>processButtons</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, buttons.o(i.processButtons))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = processButtons &rArr; processButton &rArr; tune_play &rArr; next &rArr;  next (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processButton
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_update
</UL>

<P><STRONG><a name="[94]"></a>batteryUpdate</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, diag.o(i.batteryUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = batteryUpdate &rArr; battery_updateNow &rArr; Get_Adc_Average &rArr; Get_Adc &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_updateNow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> diag.o(i.updateVoltage)
</UL>
<P><STRONG><a name="[6d]"></a>itemLoader</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, diag.o(i.itemLoader))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = itemLoader &rArr; addBackOption &rArr; setMenuOption_P &rArr; setMenuOption &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addBackOption
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOption_P
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateVoltage
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateTemperature
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateFPS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> diag.o(i.mDiagOpen)
</UL>
<P><STRONG><a name="[6e]"></a>mSelect</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, diag.o(i.mSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mSelect &rArr; doAction &rArr; loader
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appconfig_save
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrevMenuExit
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitSelected
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doAction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> diag.o(i.mDiagOpen)
</UL>
<P><STRONG><a name="[93]"></a>setShowFPS</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, diag.o(i.setShowFPS))
<BR>[Address Reference Count : 1]<UL><LI> diag.o(i.updateFPS)
</UL>
<P><STRONG><a name="[175]"></a>updateFPS</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, diag.o(i.updateFPS))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = updateFPS &rArr; setMenuOption &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOption
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemLoader
</UL>

<P><STRONG><a name="[173]"></a>updateTemperature</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, diag.o(i.updateTemperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = updateTemperature &rArr; setMenuOption &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOption
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemLoader
</UL>

<P><STRONG><a name="[174]"></a>updateVoltage</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, diag.o(i.updateVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = updateVoltage &rArr; setMenuOption &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOption
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_voltage
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemLoader
</UL>

<P><STRONG><a name="[14f]"></a>crt_animation</STRONG> (Thumb, 436 bytes, Stack size 40 bytes, display.o(i.crt_animation))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = crt_animation
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_update
</UL>

<P><STRONG><a name="[16c]"></a>readPixels</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, draw.o(i.readPixels))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bitmap
</UL>

<P><STRONG><a name="[16d]"></a>setBuffByte</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, draw.o(i.setBuffByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setBuffByte
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string
</UL>

<P><STRONG><a name="[6f]"></a>itemLoader</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, m_display.o(i.itemLoader))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = itemLoader &rArr; addBackOption &rArr; setMenuOption_P &rArr; setMenuOption &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addBackOption
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOptions
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_display.o(i.mDisplayOpen)
</UL>
<P><STRONG><a name="[70]"></a>mSelect</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, m_display.o(i.mSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mSelect &rArr; doAction &rArr; loader
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appconfig_save
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrevMenuExit
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitSelected
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doAction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_display.o(i.mDisplayOpen)
</UL>
<P><STRONG><a name="[86]"></a>setAnimations</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, m_display.o(i.setAnimations))
<BR>[Address Reference Count : 1]<UL><LI> m_display.o(i.setMenuOptions)
</UL>
<P><STRONG><a name="[83]"></a>setBrightness</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, m_display.o(i.setBrightness))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = setBrightness &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_display.o(i.setMenuOptions)
</UL>
<P><STRONG><a name="[84]"></a>setInvert</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, m_display.o(i.setInvert))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = setInvert &rArr; OLED_ColorTurn &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ColorTurn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_display.o(i.setMenuOptions)
</UL>
<P><STRONG><a name="[87]"></a>setLEDs</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, m_display.o(i.setLEDs))
<BR>[Address Reference Count : 1]<UL><LI> m_display.o(i.setMenuOptions)
</UL>
<P><STRONG><a name="[176]"></a>setMenuOptions</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, m_display.o(i.setMenuOptions))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = setMenuOptions &rArr; setMenuOption_P &rArr; setMenuOption &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOption_P
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemLoader
</UL>

<P><STRONG><a name="[85]"></a>setRotate</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, m_display.o(i.setRotate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = setRotate &rArr; OLED_DisplayTurn &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DisplayTurn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_display.o(i.setMenuOptions)
</UL>
<P><STRONG><a name="[177]"></a>getItemCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, m_main.o(i.getItemCount))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mOpen
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemLoader
</UL>

<P><STRONG><a name="[76]"></a>itemLoader</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, m_main.o(i.itemLoader))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = itemLoader &rArr; setMenuOption_P &rArr; setMenuOption &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getItemCount
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOption_P
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_main.o(i.mOpen)
</UL>
<P><STRONG><a name="[72]"></a>mOpen</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, m_main.o(i.mOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mOpen &rArr; setMenuInfo &rArr; clear &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrevMenuOpen
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuInfo
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuFuncs
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginAnimation2
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_setDrawFunc
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_setFuncs
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getItemCount
</UL>
<BR>[Address Reference Count : 2]<UL><LI> m_main.o(i.mMainOpen)
<LI> m_main.o(i.mOpen)
</UL>
<P><STRONG><a name="[77]"></a>mSelect</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, m_main.o(i.mSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mSelect &rArr; doAction &rArr; loader
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrevMenuExit
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doAction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_main.o(i.mOpen)
</UL>
<P><STRONG><a name="[188]"></a>checkScroll</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, menu.o(i.checkScroll))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prevOption
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nextOption
</UL>

<P><STRONG><a name="[14e]"></a>clear</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, menu.o(i.clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = clear &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuInfo
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_close
</UL>

<P><STRONG><a name="[156]"></a>doBtn</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, menu.o(i.doBtn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = doBtn
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;animation_movingOn
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;animation_active
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_up
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_down
</UL>

<P><STRONG><a name="[169]"></a>drawTitle</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, menu.o(i.drawTitle))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = drawTitle &rArr; draw_string &rArr; draw_bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_drawStr
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_drawIcon
</UL>

<P><STRONG><a name="[155]"></a>loader</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, menu.o(i.loader))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = loader
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doAction
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_drawStr
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_drawIcon
</UL>

<P><STRONG><a name="[186]"></a>menu_drawIcon</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, menu.o(i.menu_drawIcon))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = menu_drawIcon &rArr; drawTitle &rArr; draw_string &rArr; draw_bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bitmap
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loader
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawTitle
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_draw
</UL>

<P><STRONG><a name="[185]"></a>menu_drawStr</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, menu.o(i.menu_drawStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = menu_drawStr &rArr; drawTitle &rArr; draw_string &rArr; draw_bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loader
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawTitle
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_draw
</UL>

<P><STRONG><a name="[15e]"></a>animateIcon</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, normal.o(i.animateIcon))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
</UL>

<P><STRONG><a name="[99]"></a>down</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, normal.o(i.down))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = down &rArr; display_load
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_load
</UL>
<BR>[Address Reference Count : 1]<UL><LI> normal.o(i.watchface_normal)
</UL>
<P><STRONG><a name="[98]"></a>draw</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, normal.o(i.draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = draw &rArr; drawDate &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bitmap
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopwatch_active
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawBattery
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHARGING
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawDate
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;animateIcon
</UL>
<BR>[Address Reference Count : 1]<UL><LI> normal.o(i.watchface_normal)
</UL>
<P><STRONG><a name="[15b]"></a>drawDate</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, normal.o(i.drawDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = drawDate &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
</UL>

<P><STRONG><a name="[167]"></a>drawTickerNum</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, normal.o(i.drawTickerNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = drawTickerNum &rArr; draw_bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker
</UL>

<P><STRONG><a name="[15c]"></a>ticker</STRONG> (Thumb, 846 bytes, Stack size 40 bytes, normal.o(i.ticker))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ticker &rArr; draw_string &rArr; draw_bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bitmap
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawTickerNum
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod10
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;div10
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
</UL>

<P><STRONG><a name="[9a]"></a>up</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, normal.o(i.up))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = up &rArr; display_load
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_load
</UL>
<BR>[Address Reference Count : 1]<UL><LI> normal.o(i.watchface_normal)
</UL>
<P><STRONG><a name="[78]"></a>itemLoader</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, settings.o(i.itemLoader))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = itemLoader &rArr; addBackOption &rArr; setMenuOption_P &rArr; setMenuOption &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addBackOption
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOption_P
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settings.o(i.mSettingsOpen)
</UL>
<P><STRONG><a name="[79]"></a>mSelect</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, settings.o(i.mSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mSelect &rArr; doAction &rArr; loader
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrevMenuExit
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doAction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settings.o(i.mSettingsOpen)
</UL>
<P><STRONG><a name="[7a]"></a>itemLoader</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sleep.o(i.itemLoader))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = itemLoader &rArr; addBackOption &rArr; setMenuOption_P &rArr; setMenuOption &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addBackOption
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOptions
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sleep.o(i.mSleepOpen)
</UL>
<P><STRONG><a name="[7c]"></a>mDraw</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sleep.o(i.mDraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = mDraw &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sleep.o(i.mSleepOpen)
</UL>
<P><STRONG><a name="[7b]"></a>mSelect</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sleep.o(i.mSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mSelect &rArr; doAction &rArr; loader
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appconfig_save
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrevMenuExit
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitSelected
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doAction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sleep.o(i.mSleepOpen)
</UL>
<P><STRONG><a name="[178]"></a>setMenuOptions</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sleep.o(i.setMenuOptions))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = setMenuOptions &rArr; setMenuOption_P &rArr; setMenuOption &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOption_P
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemLoader
</UL>

<P><STRONG><a name="[88]"></a>setTimeout</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sleep.o(i.setTimeout))
<BR>[Address Reference Count : 1]<UL><LI> sleep.o(i.setMenuOptions)
</UL>
<P><STRONG><a name="[7d]"></a>itemLoader</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sound.o(i.itemLoader))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = itemLoader &rArr; addBackOption &rArr; setMenuOption_P &rArr; setMenuOption &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addBackOption
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOptions
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sound.o(i.mSoundOpen)
</UL>
<P><STRONG><a name="[7e]"></a>mSelect</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sound.o(i.mSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mSelect &rArr; doAction &rArr; loader
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appconfig_save
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrevMenuExit
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitSelected
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doAction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sound.o(i.mSoundOpen)
</UL>
<P><STRONG><a name="[179]"></a>setMenuOptions</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, sound.o(i.setMenuOptions))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = setMenuOptions &rArr; setMenuOption_P &rArr; setMenuOption &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOption_P
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSoundOpen
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemLoader
</UL>

<P><STRONG><a name="[197]"></a>setVolume</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sound.o(i.setVolume))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setVolumeUI
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setVolumeHour
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setVolumeAlarm
</UL>

<P><STRONG><a name="[8a]"></a>setVolumeAlarm</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sound.o(i.setVolumeAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setVolumeAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setVolume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sound.o(i.setMenuOptions)
</UL>
<P><STRONG><a name="[8b]"></a>setVolumeHour</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sound.o(i.setVolumeHour))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setVolumeHour
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setVolume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sound.o(i.setMenuOptions)
</UL>
<P><STRONG><a name="[89]"></a>setVolumeUI</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sound.o(i.setVolumeUI))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setVolumeUI
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setVolume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sound.o(i.setMenuOptions)
</UL>
<P><STRONG><a name="[90]"></a>btnExit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stopwatch.o(i.btnExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = btnExit &rArr; animation_start
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;animation_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stopwatch.o(i.stopwatch_open)
</UL>
<P><STRONG><a name="[92]"></a>btnReset</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stopwatch.o(i.btnReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = btnReset
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stopwatch.o(i.stopwatch_open)
</UL>
<P><STRONG><a name="[91]"></a>btnStartStop</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stopwatch.o(i.btnStartStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = btnStartStop
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis_get
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwrmgr_setState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stopwatch.o(i.stopwatch_open)
</UL>
<P><STRONG><a name="[8f]"></a>draw</STRONG> (Thumb, 412 bytes, Stack size 48 bytes, stopwatch.o(i.draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = draw &rArr; time_timeStr &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_timeStr
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bitmap
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawBattery
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod10
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;div10
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stopwatch.o(i.stopwatch_open)
</UL>
<P><STRONG><a name="[13d]"></a>beginSelect</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, timedate.o(i.beginSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = beginSelect &rArr; setMenuFuncs
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuFuncs
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selectTime
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selectDate
</UL>

<P><STRONG><a name="[16e]"></a>endSelect</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, timedate.o(i.endSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = endSelect &rArr; setMenuFuncs
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuFuncs
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selectTime
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selectDate
</UL>

<P><STRONG><a name="[199]"></a>getMaxValForSetting</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, timedate.o(i.getMaxValForSetting))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeDataUp
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeDataDown
</UL>

<P><STRONG><a name="[55]"></a>itemLoader</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, timedate.o(i.itemLoader))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = itemLoader &rArr; addBackOption &rArr; setMenuOption_P &rArr; setMenuOption &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addBackOption
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOption_P
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showTimeStr
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showDateStr
</UL>
<BR>[Address Reference Count : 3]<UL><LI> timedate.o(i.beginSelect)
<LI> timedate.o(i.endSelect)
<LI> timedate.o(i.mTimeDateOpen)
</UL>
<P><STRONG><a name="[5e]"></a>mDown</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, timedate.o(i.mDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mDown &rArr; nextOption
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nextOption
</UL>
<BR>[Address Reference Count : 2]<UL><LI> timedate.o(i.endSelect)
<LI> timedate.o(i.mTimeDateOpen)
</UL>
<P><STRONG><a name="[57]"></a>mSelect</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, timedate.o(i.mSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mSelect &rArr; doAction &rArr; loader
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrevMenuExit
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitSelected
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doAction
</UL>
<BR>[Address Reference Count : 3]<UL><LI> timedate.o(i.beginSelect)
<LI> timedate.o(i.endSelect)
<LI> timedate.o(i.mTimeDateOpen)
</UL>
<P><STRONG><a name="[5d]"></a>mUp</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, timedate.o(i.mUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mUp &rArr; prevOption
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prevOption
</UL>
<BR>[Address Reference Count : 2]<UL><LI> timedate.o(i.endSelect)
<LI> timedate.o(i.mTimeDateOpen)
</UL>
<P><STRONG><a name="[183]"></a>makeDateStr</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, timedate.o(i.makeDateStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = makeDateStr &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showDateStr
</UL>

<P><STRONG><a name="[184]"></a>makeTimeStr</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, timedate.o(i.makeTimeStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = makeTimeStr &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showTimeStr
</UL>

<P><STRONG><a name="[68]"></a>saveTimeDate</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, timedate.o(i.saveTimeDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = saveTimeDate &rArr; time_set &rArr; rtc_save &rArr; save_rtc &rArr; PCF8563_SetTime &rArr; PCF8563_Write_nByte &rArr; IIC_Write_Byte &rArr; IIC_SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appconfig_save
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timedate.o(i.itemLoader)
</UL>
<P><STRONG><a name="[8d]"></a>selectDate</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, timedate.o(i.selectDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = selectDate &rArr; time_dow
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;endSelect
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginSelect
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_monthDayCount
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_dow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timedate.o(i.showDateStr)
</UL>
<P><STRONG><a name="[8e]"></a>selectTime</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, timedate.o(i.selectTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = selectTime &rArr; endSelect &rArr; setMenuFuncs
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_timeMode
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;endSelect
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginSelect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timedate.o(i.showTimeStr)
</UL>
<P><STRONG><a name="[17a]"></a>showDateStr</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, timedate.o(i.showDateStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = showDateStr &rArr; setMenuOption &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOption
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeDateStr
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemLoader
</UL>

<P><STRONG><a name="[17b]"></a>showTimeStr</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, timedate.o(i.showTimeStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = showTimeStr &rArr; setMenuOption &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOption
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeTimeStr
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemLoader
</UL>

<P><STRONG><a name="[58]"></a>timeDataDown</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, timedate.o(i.timeDataDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timeDataDown
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMaxValForSetting
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timedate.o(i.beginSelect)
</UL>
<P><STRONG><a name="[56]"></a>timeDataUp</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, timedate.o(i.timeDataUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timeDataUp
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMaxValForSetting
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timedate.o(i.beginSelect)
</UL>
<P><STRONG><a name="[59]"></a>timeDateDraw</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, timedate.o(i.timeDateDraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = timeDateDraw &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_clearArea
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timedate.o(i.beginSelect)
</UL>
<P><STRONG><a name="[7f]"></a>next</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, tune.o(i.next))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + In Cycle
<LI>Call Chain = next &rArr;  next (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_buzz
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tune_play
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tune.o(i.next)
</UL>
<P><STRONG><a name="[108]"></a>_OLED_DrawLine</STRONG> (Thumb, 178 bytes, Stack size 72 bytes, watchface.o(i._OLED_DrawLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = _OLED_DrawLine &rArr; _OLED_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OLED_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
</UL>

<P><STRONG><a name="[109]"></a>_OLED_DrawPoint</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, watchface.o(i._OLED_DrawPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _OLED_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OLED_DrawLine
</UL>

<P><STRONG><a name="[163]"></a>__SysTick</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, watchface.o(i.__SysTick))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
</UL>

<P><STRONG><a name="[166]"></a>animateIcon</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, watchface.o(i.animateIcon))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
</UL>

<P><STRONG><a name="[96]"></a>down</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, watchface.o(i.down))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = down &rArr; display_load
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_load
</UL>
<BR>[Address Reference Count : 1]<UL><LI> watchface.o(i.watchfaceOpen)
</UL>
<P><STRONG><a name="[164]"></a>drawDate</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, watchface.o(i.drawDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = drawDate &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
</UL>

<P><STRONG><a name="[168]"></a>drawTickerNum</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, watchface.o(i.drawTickerNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = drawTickerNum &rArr; draw_bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker
</UL>

<P><STRONG><a name="[165]"></a>ticker</STRONG> (Thumb, 808 bytes, Stack size 32 bytes, watchface.o(i.ticker))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ticker &rArr; draw_string &rArr; draw_bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod10
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;div10
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawTickerNum
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
</UL>

<P><STRONG><a name="[97]"></a>up</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, watchface.o(i.up))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = up &rArr; display_load
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_load
</UL>
<BR>[Address Reference Count : 1]<UL><LI> watchface.o(i.watchfaceOpen)
</UL>
<P><STRONG><a name="[143]"></a>stop</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, beep.o(i.stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stop
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_buzz
</UL>

<P><STRONG><a name="[16f]"></a>flash</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, led.o(i.flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = flash
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis_get
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_flash
</UL>

<P><STRONG><a name="[f4]"></a>RTC_BinToBcd2</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, pcf8563_cfg.o(i.RTC_BinToBcd2))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_SetTime
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_SetDate
</UL>

<P><STRONG><a name="[1a8]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[19f]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[51]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
